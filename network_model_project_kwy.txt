library(sand)
library(ergm)

#generation of link probabilities and adjacency matrix of graph
set.seed(1)
x=rnorm(100)
y=runif(100)
g.mat=p.mat=matrix(nrow=100,ncol=100,data=0)
for(i in 1:99) for(j in (i+1):100){ 
p.mat[i,j]=p.mat[j,i]=y[i]*y[j]*exp(-abs(x[i]-x[j]))
g.mat[i,j]=g.mat[j,i]=(runif(1)<p.mat[i,j])
}
g=graph_from_adjacency_matrix(g.mat,mode="undirected")
igraph_options(vertex.size=6,vertex.label=NA)
plot(g)

#check distribution of node degree, assortativity of degree, transitivity 
hist(degree(g), col="lightblue", xlim=c(0,25), xlab="Vertex Degree", ylab="Frequency", main="")
assortativity_degree(g)
edge_density(g)
transitivity(g)

#computing average link probabilities
s1=sum(p.mat)/9900
s1

#fitting a logistic model
v.attrs.x=x
v.attrs.y=y
g.s=network::as.network(as.matrix(g.mat),directed=FALSE)
network::set.vertex.attribute(g.s,"X",v.attrs.x)
network::set.vertex.attribute(g.s,"Y",v.attrs.y)

g.log1=formula(g.s~edges)
g.ergm1=ergm(g.log1)
summary(g.ergm1)

g.log2=formula(g.s~edges+nodemain("X"))
g.ergm2=ergm(g.log2)
summary(g.ergm2)

g.log3=formula(g.s~edges+nodemain("Y"))
g.ergm3=ergm(g.log3)
summary(g.ergm3)

g.log4=formula(g.s~edges+nodemain("X")+nodemain("Y"))
g.ergm4=ergm(g.log4)
summary(g.ergm4)

g.log5=formula(g.s~edges+match("X"))
g.ergm5=ergm(g.log5)
summary(g.ergm5)

g.log6=formula(g.s~edges+match("Y"))
g.ergm6=ergm(g.log6)
summary(g.ergm6)

#use logistic model 3 for link prediction
g.predict=predict(g.ergm3)
g.ord=order(g.predict$p)
g1=g.predict$head[g.ord]
g2=g.predict$tail[g.ord]

#compute average link probability of top 10 node pairs
s2=0
for(i in 4941:4950) s2=s2+p.mat[g1[i],g2[i]]/10
s2

#fitting an ergm model
g.mplefit1=ergmMPLE(g.s~edges+triangles,output="fit")
summary(g.mplefit1)

g.mplefit2=ergmMPLE(g.s~edges+kstar(2),output="fit")
summary(g.mplefit2)

g.mplefit3=ergmMPLE(g.s~edges+kstar(3),output="fit")
summary(g.mplefit3)

g.mplefit4=ergmMPLE(g.s~edges+triangles+kstar(2),output="fit")
summary(g.mplefit4)

g.mplefit5=ergmMPLE(g.s~edges+triangles+kstar(3),output="fit")
summary(g.mplefit5)

g.mplefit6=ergmMPLE(g.s~edges+triangles+kstar(2)+kstar(3),output="fit")
summary(g.mplefit6)

g.mplefit7=ergmMPLE(g.s~edges+gwesp(log(3),fixed=TRUE),output="fit")
summary(g.mplefit7)

g.mplefit8=ergmMPLE(g.s~edges+gwesp(1,fixed=TRUE),output="fit")
summary(g.mplefit8)

g.mplefit9=ergmMPLE(g.s~edges+triangles+gwesp(log(3),fixed=TRUE),output="fit")
summary(g.mplefit9)

g.mplefit10=ergmMPLE(g.s~edges+triangles+gwesp(1,fixed=TRUE),output="fit")
summary(g.mplefit10)

g.mplefit11=ergmMPLE(g.s~edges+triangles+nodemain("Y"),output="fit")
summary(g.mplefit11)

#use ergm model 11 for link prediction
g.predict=predict(g.mplefit11)
g.ord=order(g.predict$p)
g1=g.predict$head[g.ord]
g2=g.predict$tail[g.ord]

#compute average link probability of top 10 node pairs
s3=0
for(i in 4941:4950) s3=s3+p.mat[g1[i],g2[i]]/10
s3

#link prediction without model fitting

#suv=number of common neighbours
a2=g.mat%*%g.mat
for(i in 1:100) for(j in 1:i) a2[i,j]=0
sort(a2)
select=(a2>8)+(a2==8)/6
sum(select)
s4=sum(select*p.mat)/10
s4

#suv=ku+kv
g.deg=degree(g)
kupkv=matrix(nrow=100,ncol=100,data=0)
for(i in 1:100) for (j in 1:i) kupkv[i,j]=g.deg[i]+g.deg[j]
sort(kupkv)
select=(kupkv>46)+(kupkv==46)*4/6
sum(select)
s4=sum(select*p.mat)/10
s4

#suv=ku*kv
g.deg=degree(g)
kukv=matrix(nrow=100,ncol=100,data=0)
for(i in 1:100) for (j in 1:i) kukv[i,j]=g.deg[i]*g.deg[j]
sort(kukv)
select=(kukv>525)+(kukv==525)*2/4
sum(select)
s4=sum(select*p.mat)/10
s4

#jaccard
a2=g.mat%*%g.mat
for(j in 1:100) for(i in 1:j) a2[i,j]=0
neighbor=matrix(nrow=100,ncol=100,data=0)
for(i in 1:100) for (j in 1:i) neighbor[i,j]=degree(g)[i]+degree(g)[j]
suv.jaccard=a2/neighbor
suv.jaccard[is.nan(suv.jaccard)]=0
sort(suv.jaccard)
select=(suv.jaccard>0.25)+(suv.jaccard==0.25)*7/9
sum(select)
s4=sum(select*p.mat)/10
s4